name: Deploy to VPS

on:
  push:
    branches:
      - main  # Sadece 'main' dalına yapılan push'larda çalışır.

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Kodu Checkout Et
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. SSH Kurulumu
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${VPS_IP} >> ~/.ssh/known_hosts
          echo "StrictHostKeyChecking=no" >> ~/.ssh/config

      # 3. VPS'ye Bağlan ve Deploy Et
      - name: Deploy to VPS
        env:  # Ortam değişkenlerini Secrets'ten al
          PROD_DB_URL: ${{ secrets.PROD_DB_URL }}
          PROD_DB_USERNAME: ${{ secrets.PROD_DB_USERNAME }}
          PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          PROD_JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}
          PROD_DISCORD_WEBHOOK_URL: ${{ secrets.PROD_DISCORD_WEBHOOK_URL }}
          PROD_WOW_API_USERNAME: ${{ secrets.PROD_WOW_API_USERNAME }}
          PROD_WOW_API_PASSWORD: ${{ secrets.PROD_WOW_API_PASSWORD }}
          PROD_DISCORD_BOT_TOKEN: ${{ secrets.PROD_DISCORD_BOT_TOKEN }}
          PROD_DISCORD_CLIENT_ID: ${{ secrets.PROD_DISCORD_CLIENT_ID }}
          PROD_DISCORD_CLIENT_SECRET: ${{ secrets.PROD_DISCORD_CLIENT_SECRET }}
          PROD_DISCORD_CALLBACK_URL: ${{ secrets.PROD_DISCORD_CALLBACK_URL }}
          PROD_DISCORD_INVITE_URL: ${{ secrets.PROD_DISCORD_INVITE_URL }}
        run: |
          echo "Starting deployment process..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa VPS_USER@VPS_IP << 'EOF'
            set -e  # Hata durumunda işlemi durdur

            echo "SSH bağlantısı başarıyla kuruldu."

            # Uygulama dizinine git
            cd /root/projects/wowdiscordbot || exit 1
            echo "Proje dizinine gidildi."

            # Son güncellemeleri al
            git pull origin main || exit 1
            echo "Son güncellemeler başarıyla alındı."

            # Docker Compose ile eski container'ları durdur ve yeniden başlat
            export PROD_DB_URL=$PROD_DB_URL
            export PROD_DB_USERNAME=$PROD_DB_USERNAME
            export PROD_DB_PASSWORD=$PROD_DB_PASSWORD
            export PROD_JWT_SECRET=$PROD_JWT_SECRET
            export PROD_DISCORD_WEBHOOK_URL=$PROD_DISCORD_WEBHOOK_URL
            export PROD_WOW_API_USERNAME=$PROD_WOW_API_USERNAME
            export PROD_WOW_API_PASSWORD=$PROD_WOW_API_PASSWORD
            export PROD_DISCORD_BOT_TOKEN=$PROD_DISCORD_BOT_TOKEN
            export PROD_DISCORD_CLIENT_ID=$PROD_DISCORD_CLIENT_ID
            export PROD_DISCORD_CLIENT_SECRET=$PROD_DISCORD_CLIENT_SECRET
            export PROD_DISCORD_CALLBACK_URL=$PROD_DISCORD_CALLBACK_URL
            export PROD_DISCORD_INVITE_URL=$PROD_DISCORD_INVITE_URL

            docker-compose down || exit 1
            echo "Eski container'lar durduruldu."

            docker-compose up -d --build || exit 1
            echo "Yeni container'lar başarıyla başlatıldı."

            echo "Deployment işlemi tamamlandı!"
          EOF
