name: Deploy to VPS

on:
  push:
    branches:
      - main  # Only runs on pushes to the 'main' branch.

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      VPS_IP: ${{ secrets.VPS_IP }}
      VPS_USER: ${{ secrets.VPS_USER }}

    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Clean up existing Java versions
      - name: Clean up existing Java versions
        run: |
          sudo apt-get remove --purge -y openjdk-11-* openjdk-8-* temurin-*
          sudo apt-get autoremove -y

      # 3. Install OpenJDK 17
      - name: Install OpenJDK 17
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk

      # 4. Configure JAVA_HOME and PATH
      - name: Configure JAVA_HOME and PATH
        run: |
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
          echo "PATH=/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH" >> $GITHUB_ENV
        shell: bash

      # 5. Add Java to system PATH
      - name: Add Java to PATH
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export PATH=$JAVA_HOME/bin:$PATH
          echo "JAVA_HOME and PATH configured."

      # 6. Verify Java version
      - name: Verify Java version
        run: |
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"
          java -version

      # 7. Give execute permissions to gradlew
      - name: Give execute permissions to gradlew
        run: chmod +x ./gradlew

      # 8. Build the project using Gradle
      - name: Build the project
        run: ./gradlew clean build

      # 9. Set up SSH
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${VPS_IP} >> ~/.ssh/known_hosts
          echo "StrictHostKeyChecking=no" >> ~/.ssh/config

      # 10. Stop the existing wowdiscordbot service
      - name: Stop Existing Service
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${VPS_USER}@${VPS_IP} << 'EOF'
            sudo systemctl stop testdiscordbot.service
            echo "Old wowdiscordbot service stopped."
          EOF

      # 11. Clean the test directory and copy the new JAR file
      - name: Clear Test Directory and Copy New JAR
        run: |
          # Clean up old files in the test directory
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${VPS_USER}@${VPS_IP} << 'EOF'
            rm -rf /root/projects/wowdiscordbot/test/*
            echo "Test directory cleaned."
          EOF
          
          # Copy the JAR file to the server
          scp -o StrictHostKeyChecking=no build/libs/*.jar ${VPS_USER}@${VPS_IP}:/root/projects/wowdiscordbot/test/
          
          # Rename the JAR file on the server
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${VPS_USER}@${VPS_IP} << 'EOF'
            # If a file with "-plain" in the name exists, delete it
            rm -f /root/projects/wowdiscordbot/test/*-plain.jar
          
            # Rename the JAR file
            mv /root/projects/wowdiscordbot/test/*.jar /root/projects/wowdiscordbot/test/discordBot.jar
            echo "JAR file renamed successfully."
          EOF

      # 12. Set environment variables on the server and start the service
      - name: Set Environment Variables and Write to .env
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${VPS_USER}@${VPS_IP} << EOF
            > /root/projects/wowdiscordbot/.env

            # Yeni deÄŸerleri yaz
            echo "PROD_DB_URL=${PROD_DB_URL}" >> /root/projects/wowdiscordbot/.env
            echo "PROD_DB_USERNAME=${PROD_DB_USERNAME}" >> /root/projects/wowdiscordbot/.env
            echo "PROD_DB_PASSWORD=${PROD_DB_PASSWORD}" >> /root/projects/wowdiscordbot/.env
            echo "PROD_DISCORD_WEBHOOK_URL=${PROD_DISCORD_WEBHOOK_URL}" >> /root/projects/wowdiscordbot/.env
            echo "PROD_WOW_API_USERNAME=${PROD_WOW_API_USERNAME}" >> /root/projects/wowdiscordbot/.env
            echo "PROD_WOW_API_PASSWORD=${PROD_WOW_API_PASSWORD}" >> /root/projects/wowdiscordbot/.env
            echo "PROD_DISCORD_BOT_TOKEN=${PROD_DISCORD_BOT_TOKEN}" >> /root/projects/wowdiscordbot/.env
            echo "PROD_DISCORD_CLIENT_ID=${PROD_DISCORD_CLIENT_ID}" >> /root/projects/wowdiscordbot/.env
            echo "PROD_DISCORD_CLIENT_SECRET=${PROD_DISCORD_CLIENT_SECRET}" >> /root/projects/wowdiscordbot/.env
            echo "PROD_DISCORD_CALLBACK_URL=${PROD_DISCORD_CALLBACK_URL}" >> /root/projects/wowdiscordbot/.env
            echo "PROD_DISCORD_INVITE_URL=${PROD_DISCORD_INVITE_URL}" >> /root/projects/wowdiscordbot/.env
            echo "PROD_JWT_SECRET=${PROD_JWT_SECRET}" >> /root/projects/wowdiscordbot/.env

            sudo systemctl enable testdiscordbot.service
            sudo systemctl start testdiscordbot.service
          EOF
      
      

      # 13. Success Message
      - name: Success Message
        run: echo "Deployment completed successfully!"
