name: Deploy to VPS

on:
  push:
    branches:
      - main  # Sadece 'main' dalına yapılan push'larda çalışır.

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Kodu Checkout Et
      - name: Checkout code
        uses: actions/checkout@v3

      # Set environment variables using GitHub secrets
      - name: Set Environment Variables
        run: |
          echo "PROD_DISCORD_WEBHOOK_URL=${{ secrets.PROD_DISCORD_WEBHOOK_URL }}" >> $GITHUB_ENV
          echo "PROD_WOW_API_USERNAME=${{ secrets.PROD_WOW_API_USERNAME }}" >> $GITHUB_ENV
          echo "PROD_WOW_API_PASSWORD=${{ secrets.PROD_WOW_API_PASSWORD }}" >> $GITHUB_ENV
          echo "PROD_DB_URL=${{ secrets.PROD_DB_URL }}" >> $GITHUB_ENV
          echo "PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}" >> $GITHUB_ENV
          echo "PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_ENV
          echo "PROD_DISCORD_BOT_TOKEN=${{ secrets.PROD_DISCORD_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "PROD_DISCORD_CLIENT_ID=${{ secrets.PROD_DISCORD_CLIENT_ID }}" >> $GITHUB_ENV
          echo "PROD_DISCORD_CLIENT_SECRET=${{ secrets.PROD_DISCORD_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "PROD_DISCORD_CALLBACK_URL=${{ secrets.PROD_DISCORD_CALLBACK_URL }}" >> $GITHUB_ENV
          echo "PROD_DISCORD_INVITE_URL=${{ secrets.PROD_DISCORD_INVITE_URL }}" >> $GITHUB_ENV
          echo "PROD_JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}" >> $GITHUB_ENV

      # 2. Mevcut Java sürümlerini temizle
      - name: Clean up existing Java versions
        run: |
          sudo apt-get remove --purge -y openjdk-11-* openjdk-8-* temurin-*
          sudo apt-get autoremove -y

      # 3. Java 17'yi kur
      - name: Install OpenJDK 17
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk

      # 4. JAVA_HOME ve PATH değişkenlerini ayarla
      - name: Configure JAVA_HOME and PATH
        run: |
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
          echo "PATH=/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH" >> $GITHUB_ENV
        shell: bash

      # 5. Sistem PATH'ine Java'yı ekle
      - name: Add Java to PATH
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export PATH=$JAVA_HOME/bin:$PATH
          echo "JAVA_HOME ve PATH ayarlandı."

      # 6. Java sürümünü doğrula
      - name: Verify Java version
        run: |
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"
          java -version

      # 7. Gradle wrapper dosyasına çalıştırılabilir izin ver
      - name: Give execute permissions to gradlew
        run: chmod +x ./gradlew

      # 8. Gradle ile build al
      - name: Build the project
        run: ./gradlew clean build

      # 9. SSH Kurulumu
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${VPS_IP} >> ~/.ssh/known_hosts
          echo "StrictHostKeyChecking=no" >> ~/.ssh/config

      # 10. Eski wowdiscordbot servisini durdur
      - name: Stop Existing Service
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${VPS_USER}@${VPS_IP} << 'EOF'
            sudo systemctl stop testdiscordbot.service
            echo "Eski wowdiscordbot servisi durduruldu."
          EOF

      # 11. Test klasöründeki eski dosyaları temizle ve yeni jar dosyasını kopyala
      - name: Clear Test Directory and Copy New JAR
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          # Test dizinindeki eski dosyaları temizle
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${VPS_USER}@${VPS_IP} << 'EOF'
            rm -rf /root/projects/wowdiscordbot/test/*
            echo "Test klasörü temizlendi."
          EOF
          
          # JAR dosyasını sunucuya kopyala
          scp -o StrictHostKeyChecking=no build/libs/*.jar ${VPS_USER}@${VPS_IP}:/root/projects/wowdiscordbot/test/
          
          # Sunucuda JAR dosyasının adını değiştirme
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${VPS_USER}@${VPS_IP} << 'EOF'
            # Eğer "-plain" eki içeren dosya varsa, onu sil
            rm -f /root/projects/wowdiscordbot/test/*-plain.jar
          
            # Diğer JAR dosyasının adını değiştirme
            mv /root/projects/wowdiscordbot/test/*.jar /root/projects/wowdiscordbot/test/discordBot.jar
            echo "JAR dosyasının adı başarıyla değiştirildi."
          EOF
      

      - name: Create New Service
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${VPS_USER}@${VPS_IP} << 'EOF'
            # systemd servis dosyasını oluştur
            cat <<'SERVICE' > /etc/systemd/system/testdiscordbot.service
            [Unit]
            Description=WoW Discord Bot Backend
            After=network.target
            
            [Service]
            Type=simple
            User=root
            ExecStart=/usr/bin/java -jar /root/projects/wowdiscordbot/test/discordBot.jar
            Restart=on-failure
            
            [Install]
            WantedBy=multi-user.target
          EOF

      - name: Start Service
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${VPS_USER}@${VPS_IP} << 'EOF'
            # systemctl komutlarını ayrı olarak çalıştır
            sudo systemctl daemon-reload
            sudo systemctl enable testdiscordbot.service
            sudo systemctl start testdiscordbot.service

            echo "Yeni testdiscordbot servisi oluşturuldu ve başlatıldı."
          EOF
      

      # 14. Başarılı Deployment İle İlgili Mesaj
      - name: Success Message
        run: echo "Deployment başarıyla tamamlandı!"
